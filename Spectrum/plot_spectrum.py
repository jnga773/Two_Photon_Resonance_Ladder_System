# -*- coding: utf-8 -*-
"""
Created on Mon Mar 19 10:22:42 2018

@author: Jacob
"""

import numpy as np
import matplotlib.pyplot as plt

plt.rcParams['text.usetex'] = True
plt.rcParams['font.family'] = 'serif'

plt.close('all')

def spectrum(tau_input, corr_input, pos=None, norm="integral"):
    """
    Calculate the power spectrum corresponding to a two-time correlation
    function using FFT.

    Input
    ------------
    tau_input : array_likee
        list of times generated by code.
    corr_input : like
        list of imaginary first-order correlation values.
    pos : conditional
        Used for contour plots to define positive or negative frequencies.
        None - Both positive and negative frequencies.
        False - Negative frequencies.
        True - Positive frequencies.
    norm : string
        Type of normalisation used.
        "integral" - Normalise such that the area under the spectrum is one.
        "peak" - Normalise such that the maximum peak is one.
        "None" - No normalisation

    Output
    ------------
    spec_output : array_like
        Intensity spectrum of first-order correlation.
    wlise_output : array_like
        List of frequencies
    """
    # Shift the arrays so they are arranged from negative to positive freq
    fft = np.fft.fft(corr_input)#, norm='ortho')
    fft = np.fft.fftshift(fft)
    freq = np.fft.fftfreq(tau_input.shape[0], tau_input[1]-tau_input[0])
    freq = np.fft.fftshift(freq)
    # As the central peak is a delta function, we ignore the plot for w=0. To
    # do this we find the index in wlist where it is equal to 0.0, ignore it,
    # and create a new list excluding this value.
    if pos is True:
        indices = np.where(freq > 0.0)[0]
    elif pos is False:
        indices = np.where(freq < 0.0)[0]
    elif pos is None:
        indices = np.where(freq != 0.0)[0]
    # Remove zero frequency term
    spec_output = fft[indices]
    # Divide by 2 \pi
#    spec_output = (np.abs(spec_output) ** 2) / (2 * np.pi)
    spec_output = spec_output.real
    # take away non zero tails
    spec_output = spec_output - np.mean(spec_output[0])
    # The spectrum is given by the absolute value of the FFT squared.
#    spec = np.abs(spec) ** 2
    wlist_output = freq[indices] # wlist is in terms of FFT frequencies
    wlist_output = np.array(wlist_output) * 2 * np.pi
    if norm == "integral":
        if np.max(spec_output) == 0.0:
            spec_output = spec_output
        else:
            normalise = np.sum(spec_output) * (wlist_output[1] - wlist_output[0])
            spec_output = spec_output / normalise
    elif norm == "peak":
        if np.max(spec_output) == 0.0:
            spec_output = np.zeros(len(wlist_output))
        else:
            spec_output = spec_output / np.max(spec_output)
    elif norm == "none":
        spec_output = spec_output
    return spec_output, wlist_output

###############################################################################
#                Plotting the spectrum against frequency                      #
###############################################################################
directory = "./data_files/"
file = "spectrum"
ext = ".txt"

filename = directory + file + ext

# Reading the values of each parameter from the txt file
Omega = float(open(filename).readlines()[0])
delta = float(open(filename).readlines()[1])
xi = float(open(filename).readlines()[2])
alpha = float(open(filename).readlines()[3])

# List of times from the txt file
tau = np.loadtxt(fname=filename, dtype='float', usecols=(0,), skiprows=5)

# List of correlations from txt file. Sum of the real and imaginary parts
corr = np.loadtxt(fname=filename, dtype='float', usecols=(1,), skiprows=5) + \
       1j * np.loadtxt(fname=filename, dtype='float', usecols=(2,), skiprows=5)

#plt.figure()
#
#plt.plot(tau, np.abs(corr), color='k', lw=0.5, label=r'$|g^{(1)}(\tau)|$')
#plt.plot(tau, np.real(corr), color='C0', lw=0.5,
#         label=r'$\mathrm{Re} \left( g^{(1)}(\tau) \right)$')
#plt.plot(tau, np.imag(corr), color='C1', lw=0.5,
#         label=r'$\mathrm{Im} \left( g^{(1)}(\tau) \right)$')
#
#plt.xlim(-0.05, 15.05)
#
#plt.xlabel(r'$\gamma \tau$')
#plt.ylabel(r'$|g^{(1)}(\tau)|$')
#
#plt.legend()
#plt.tight_layout()
#plt.show()

spec, wlist = spectrum(tau, corr)

fig, ax = plt.subplots(nrows=1, ncols=1)
#plt.figure(figsize=[3, 3.5])
ax.plot(wlist, spec, color='black')

#x_ticks_maj = np.linspace(-120, 120, 7)
#ax.set_xticks(x_ticks_maj)
#ax.set_xlim(-np.abs(alpha), np.abs(alpha))
#plt.xlim(-200, 200)
#plt.ylim(-0.05, 1.05)

#plt.xlabel(r'$\left( \omega_{\mathrm{emitt}} - \omega_{\mathrm{drive}} \right) / \gamma$')
ax.set_xlabel(r'$ \left( \omega - \omega_{d} \right) / \gamma $')
#plt.ylabel('Power Spectrum (a.u.)')
ax.set_ylabel(r'Power Spectrum')
#plt.title(r'$\Omega = %s, \delta=%s, \xi=%s$'%(Omega, delta, xi))

fig.tight_layout()
fig.show()
#fig.savefig("../Images/" + file + ".pdf")
###############################################################################
#                          Combining Plots for Thesis                         #
###############################################################################
#directory = "./data_files/"
#file = "lowdrive"
#ext = ".txt"
#
#filename = directory + file + ext
#
## Reading the values of each parameter from the txt file
#omega2 = float(open(filename).readlines()[0])
#delta1 = float(open(filename).readlines()[1])
#delta1 = round(delta1, 1)
#xi1    = float(open(filename).readlines()[2])
#alpha = float(open(filename).readlines()[3])
#alpha = round(alpha, 1)
#
## List of times from the txt file
#tau1  = np.loadtxt(fname=filename, dtype='float', usecols=(0,), skiprows=5)
#
## List of correlations from txt file. Sum of the real and imaginary parts
#corr1 = np.loadtxt(fname=filename, dtype='float', usecols=(1,), skiprows=5) + \
#        1j * np.loadtxt(fname=filename, dtype='float', usecols=(2,), skiprows=5)
#
#directory = "./data_files/"
#file = "highdrive"
#ext = ".txt"
#
#filename = directory + file + ext
#
## Reading the values of each parameter from the txt file
#omega2 = float(open(filename).readlines()[0])
#delta2 = float(open(filename).readlines()[1])
#delta2 = round(delta2, 1)
#xi2    = float(open(filename).readlines()[2])
#
## List of times from the txt file
#tau2  = np.loadtxt(fname=filename, dtype='float', usecols=(0,), skiprows=5)
#
## List of correlations from txt file. Sum of the real and imaginary parts
#corr2 = np.loadtxt(fname=filename, dtype='float', usecols=(1,), skiprows=5) + \
#        1j * np.loadtxt(fname=filename, dtype='float', usecols=(2,), skiprows=5)
#
## Fourier transform
#spec1, wlist1 = spectrum(tau1, corr1)
#spec2, wlist2 = spectrum(tau2, corr2)
#
#fig, ax = plt.subplots(nrows=1, ncols=2, sharex=True, sharey=False, figsize=[6, 3.5])
#
## omega = low
#ax[0].plot(wlist1, spec1, color='black')
## omega = high
#ax[1].plot(wlist2, spec2, color='black')
#
## labels
#ax[0].set_ylabel(r'Power Spectrum')
#ax[0].set_xlabel(r'$ \left( \omega - \omega_{d} \right) / \gamma $')
#ax[1].set_xlabel(r'$ \left( \omega - \omega_{d} \right) / \gamma $')
#
## xlim for single-photon resonance
##ax[0].set_xlim(-10, 10)
#
## x_ticks for two-photon resonance
#x_ticks_maj = np.linspace(-120, 120, 7)
#ax[1].set_xlim(-120, 120)
#ax[1].set_xticks(x_ticks_maj)
#
#fig.tight_layout()
#fig.savefig("../Images/xi_0_5_bare_and_shifted.pdf")
##fig.savefig("../Images/delta_5_15.pdf")
##fig.savefig("../Images/spectrum_2level_low_and_high.pdf")

###############################################################################
#                           Labelled Plot for Thesis                          #
###############################################################################
#directory = "./data_files/"
#file = "omega40"
#ext = ".txt"
#
#filename = directory + file + ext
#
## Reading the values of each parameter from the txt file
#Omega = float(open(filename).readlines()[0])
#delta = float(open(filename).readlines()[1])
#xi = float(open(filename).readlines()[2])
#alpha = float(open(filename).readlines()[3])
#
#
## List of times from the txt file
#tau = np.loadtxt(fname=filename, dtype='float', usecols=(0,), skiprows=5)
#
## List of correlations from txt file. Sum of the real and imaginary parts
#corr = np.loadtxt(fname=filename, dtype='float', usecols=(1,), skiprows=5) + \
#       1j * np.loadtxt(fname=filename, dtype='float', usecols=(2,), skiprows=5)
#       
#spec, wlist = spectrum(tau, corr)
#
#fig, ax = plt.subplots(nrows=1, ncols=1, figsize=[6, 3.5])
#ax.plot(wlist, spec, color='black')
#
#x_ticks_maj = np.linspace(-120, 120, 7)
#ax.set_xticks(x_ticks_maj)
#ax.set_xlim(-np.abs(alpha), np.abs(alpha))
#
#ax.set_xlabel(r'$ \left( \omega - \omega_{d} \right) / \gamma $')
#ax.set_ylabel(r'Power Spectrum')
#
## add labels going left to right
#ax.text(x=-118, y=0.025, fontsize=10,
#        s=r'$\omega_{d} - \left( \omega_{+} - \omega_{-} \right)$')
#ax.text(x=-90, y=0.05, fontsize=11, 
#        s=r'$\omega_{d} - \omega_{+}$')
#
#ax.text(x=-30, y=0.012, fontsize=11, 
#        s=r'$\omega_{d} + \omega_{-}$')
#ax.text(x=5, y=0.055, fontsize=11, 
#        s=r'$\omega_{d}$')
#ax.text(x=5, y=0.012, fontsize=11, 
#        s=r'$\omega_{d} - \omega_{-}$')
#
#ax.text(x=60, y=0.05, fontsize=11, 
#        s=r'$\omega_{d} + \omega_{+}$')
#ax.text(x=74, y=0.025, fontsize=10, 
#        s=r'$\omega_{d} + \left( \omega_{+} - \omega_{-} \right)$')
#
#fig.tight_layout()
#fig.show()
#fig.savefig("../Images/labelled_spectrum.pdf")